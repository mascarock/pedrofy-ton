#include "imports/stdlib.fc";

;; Constant defining the minimum TONs required to keep the contract from being deleted
const const::min_tons_for_storage = 10000000; ;; 0.01 TON

;; Function to load stored data from the contract
(int, slice, slice) load_data() inline {
  ;; Retrieve the data cell and prepare for parsing
  var ds = get_data().begin_parse();

  ;; Return the stored values: counter, most recent sender, and owner's address
  return (
    ds~load_uint(32), ;; Counter value
    ds~load_msg_addr(), ;; Address of the most recent sender
    ds~load_msg_addr() ;; Owner's address
  );
}

;; Function to save data into the contract
() save_data(int counter_value, slice recent_sender, slice owner_address) impure inline {
  ;; Create a new cell with the values to be stored
  set_data(begin_cell()
    .store_uint(counter_value, 32) ;; Store the counter value
    .store_slice(recent_sender) ;; Store the most recent sender's address
    .store_slice(owner_address) ;; Store the owner's address
    .end_cell()); ;; Finalize the cell and save the data
}

;; Main function to handle incoming internal messages
() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    ;; Prepare to parse the received message
    slice cs = in_msg.begin_parse();

    ;; Read the first 4 bits as flags
    int flags = cs~load_uint(4); 

    ;; Retrieve the sender's address from the message
    slice sender_address = cs~load_msg_addr();

    ;; Read the operation code (op) from the message body
    int op = in_msg_body~load_uint(32);	

    ;; Load the current contract data
    var (counter_value, recent_sender, owner_address) = load_data();

    ;; Operation 1: Increment the counter
    if (op == 1) {
        ;; Increment the counter value and save the updated data
        save_data(counter_value + 1, sender_address, owner_address);
        return();
    }

    ;; Operación 2: Do nothing
    if (op == 2) {
        return(); ;; Exit without making changes
    }

    ;; Operación 3: Withdraw funds
    if (op == 3) {
        ;; Ensure the sender is the contract's owner
        throw_unless(103, equal_slice_bits(sender_address, owner_address));

        ;; Read the withdrawal amount from the message body
        int withdraw_amount = in_msg_body~load_coins();

        ;; Retrieve the current contract balance
        var [balance, _] = get_balance();

        ;; Ensure sufficient funds are available for the withdrawal
        throw_unless(104, balance >= withdraw_amount);

        ;; Calculate the return amount, ensuring the minimum balance is retained
        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

        ;; Message mode: 1 = separate transfer fees from the message value
        int msg_mode = 1; 
        
        ;; Create an internal message to transfer the funds
        var msg = begin_cell()
            .store_uint(0x18, 6) ;; Special code for internal transfera
            .store_slice(sender_address) ;; Sender's address
            .store_coins(return_value) ;; Amount to transfer
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1); ;; Flags and reserved space

        ;;  Send the internal message
        send_raw_message(msg.end_cell(), msg_mode);

        return(); ;; Exit after the transfer
    }

    ;; Throw an exception if the operation is not recognized
    throw(777);
}

;; Function to retrieve contract storage data
(int, slice, slice) get_contract_storage_data() method_id {
  ;; Load and return the stored values: counter, most recent sender, and owner
  var (counter_value, recent_sender, owner_address) = load_data();
  return (
    counter_value,
    recent_sender,
    owner_address
  );
}

;; Function to get the contract's current balance
int balance() method_id {
  ;; Retrieve and return the current balance of the contract
  var [balance, _] = get_balance();
  return balance;
}
